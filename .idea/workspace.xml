<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="b7e261bd-af72-4e5d-b464-2c0b0ae74921" name="Changes" comment="import logging&#10;from dataclasses import dataclass&#10;from picamera2.outputs import FileOutput, CircularOutput, FfmpegOutput, PyavOutput&#10;import time&#10;&#10;LOG = logging.getLogger(&quot;PiSecureKit&quot;)&#10;&#10;&#10;@dataclass&#10;class VideoConfig:&#10;    width: int = 1920&#10;    height: int = 1080&#10;    format: str = &quot;YUV420&quot;&#10;    frame_rate: int = 30&#10;    lores_enabled: bool = False&#10;    lores_width: int = 640&#10;    lores_height: int = 480&#10;&#10;&#10;class Picamera2Driver:&#10;    def __init__(self, cfg):&#10;        self._cfg = cfg&#10;        self._picam2 = None  # Assume initialization elsewhere&#10;&#10;        # Attempt a series of increasingly lighter configurations to avoid DMA/CMA OOM&#10;        attempts = [&#10;            # (width, height, pixel_format, buffer_count, use_lores)&#10;            (self._cfg.video.width, self._cfg.video.height, self._cfg.video.format, 3, self._cfg.video.lores_enabled),&#10;            (1280, 720,       &quot;YUV420&quot;, 3, False),&#10;            (1280, 720,       &quot;YUV420&quot;, 2, False),&#10;            (1024, 576,       &quot;YUV420&quot;, 2, False),&#10;            (640,  480,       &quot;YUV420&quot;, 2, False),&#10;        ]&#10;&#10;        configured = False&#10;        for (w, h, fmt, buffers, use_lores) in attempts:&#10;            if self._try_configure(w, h, fmt, buffers, use_lores):&#10;                LOG.info(&quot;Configured camera: %dx%d %s (buffers=%d, lores=%s)&quot;, w, h, fmt, buffers, use_lores)&#10;                configured = True&#10;                break&#10;&#10;        if not configured:&#10;            raise RuntimeError(&quot;Failed to configure Picamera2 after multiple attempts; likely CMA/DMA memory is insufficient.&quot;)&#10;&#10;    def _try_configure(self, main_w: int, main_h: int, main_fmt: str, buffer_count: int, use_lores: bool) -&gt; bool:&#10;        try:&#10;            kwargs = {&#10;                &quot;main&quot;: {&quot;size&quot;: (main_w, main_h), &quot;format&quot;: main_fmt},&#10;                &quot;controls&quot;: {&quot;FrameRate&quot;: self._cfg.video.frame_rate},&#10;            }&#10;            if use_lores:&#10;                kwargs[&quot;lores&quot;] = {&quot;size&quot;: (self._cfg.video.lores_width, self._cfg.video.lores_height), &quot;format&quot;: &quot;YUV420&quot;}&#10;            video_conf = self._picam2.create_video_configuration(**kwargs)&#10;            video_conf[&quot;buffer_count&quot;] = buffer_count&#10;            self._picam2.align_configuration(video_conf)&#10;            self._picam2.configure(video_conf)&#10;            return True&#10;        except Exception as e:&#10;            LOG.warning(&quot;Configure attempt failed for %dx%d %s (buffers=%d, lores=%s): %s&quot;, main_w, main_h, main_fmt, buffer_count, use_lores, e)&#10;            return False&#10;&#10;    def start(self):&#10;        pass&#10;&#10;&#10;def build_camera(cfg):&#10;    pass&#10;&#10;&#10;# Assume picam2, HUB, encoder_HQ are defined elsewhere in the code&#10;&#10;# After two video_config creations and picam2.configure(video_config2)&#10;# picam2.configure(video_config2)&#10;picam2.set_controls({&quot;AfMode&quot;: 0})  # 0=Manual; avoids PDAF path on IMX708&#10;&#10;# Prefer PyAV for proper PTS; fall back to FFMPEG if PyAV is unavailable&#10;try:&#10;    HQoutput = PyavOutput(f&quot;rtsp://{HUB}:8554/hqstream&quot;, format=&quot;rtsp&quot;)&#10;    logging.info(&quot;Using PyavOutput (rtsp) for accurate timestamps&quot;)&#10;except Exception as e:&#10;    logging.warning(&quot;PyavOutput not available (%s); falling back to FfmpegOutput&quot;, e)&#10;    HQoutput = FfmpegOutput(&#10;        f&quot;-fflags +genpts -use_wallclock_as_timestamps 1 &quot;&#10;        f&quot;-rtsp_transport tcp -muxdelay 0 -muxpreload 0 &quot;&#10;        f&quot;-f rtsp rtsp://{HUB}:8554/hqstream&quot;,&#10;        audio=False&#10;    )&#10;&#10;# LQoutput = FfmpegOutput(&#10;#     f&quot;-fflags +genpts -use_wallclock_as_timestamps 1 &quot;&#10;#     f&quot;-rtsp_transport tcp -muxdelay 0 -muxpreload 0 &quot;&#10;#     f&quot;-f rtsp rtsp://{HUB}:8554/lqstream&quot;,&#10;#     audio=False&#10;# )&#10;&#10;retries = 0&#10;MAX_RETRIES = 10&#10;print(&quot;starting camera watchdog loop&quot;)&#10;while True:&#10;    try:&#10;        print(&quot;starting camera streamsâ€¦&quot;)&#10;        picam2.start_recording(encoder_HQ, HQoutput)&#10;        print(&quot;camera streams started&quot;)&#10;        last_still = 0.0&#10;        while True:&#10;            now = time.monotonic()&#10;            if now - last_still &gt;= 5.0:&#10;                req = picam2.capture_request()&#10;                try:&#10;                    req.save(&quot;main&quot;, &quot;/dev/shm/camera-tmp.jpg&quot;)&#10;                finally:&#10;                    req.release()&#10;                last_still = now&#10;            time.sleep(0.05)&#10;    except Exception as e:&#10;        logging.error(&quot;streamer exception: %s&quot;, e)&#10;        # Stop recording and attempt reconfigure/restart&#10;        try:&#10;            picam2.stop_recording()&#10;        except Exception:&#10;            pass&#10;        retries += 1&#10;        if retries &gt; MAX_RETRIES:&#10;            logging.critical(&quot;too many failures; exiting watchdog&quot;)&#10;            break&#10;        # Re-align and re-configure with safer settings in case CMA fragmented&#10;        try:&#10;            safe_conf = picam2.create_video_configuration(&#10;                main={&quot;size&quot;: (1280, 720), &quot;format&quot;: &quot;YUV420&quot;},&#10;                lores=None,&#10;                raw=None,&#10;                controls={&quot;FrameRate&quot;: 30},&#10;                buffer_count=2,&#10;            )&#10;            picam2.align_configuration(safe_conf)&#10;            picam2.configure(safe_conf)&#10;            picam2.set_controls({&quot;AfMode&quot;: 0})&#10;        except Exception as reconf_err:&#10;            logging.error(&quot;reconfigure failed: %s&quot;, reconf_err)&#10;        # Short backoff before retry&#10;        time.sleep(2.0)&#10;        continue" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Python Script" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;dez011&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/dez011/PyGation.git&quot;,
    &quot;accountId&quot;: &quot;7e53ff20-b4bd-48be-aafd-69a40222dcf1&quot;
  }
}</component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 3
}</component>
  <component name="ProjectId" id="2ux9w7Qb8n4FK909hxe3ahl3miD" />
  <component name="ProjectLevelVcsManager">
    <OptionsSetting value="false" id="Update" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Python tests.Python tests for test_Irrigation.Test.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests for test_Irrigation.Test.test_control_pump.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests for test_Irrigation.Test.test_pump_off_command.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests for test_Irrigation.Test.test_pump_on_command.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests for test_Irrigation.Test.test_run_schedule.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests for test_Irrigation.Test.test_schedule_watering.executor&quot;: &quot;Debug&quot;,
    &quot;Python tests.Python tests in test_Irrigation.py.executor&quot;: &quot;Run&quot;,
    &quot;Python.Irrigation.executor&quot;: &quot;Run&quot;,
    &quot;Python.main.executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
    &quot;last_opened_file_path&quot;: &quot;/Users/miguelhernandez/Documents/GitHub/PyGation&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/irrigation" />
    </key>
  </component>
  <component name="RunManager" selected="Python.main">
    <configuration name="main" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
      <module name="PyGation" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/piSecureKit" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/piSecureKit/main.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
    <configuration name="Python tests for irrigation.test_Irrigation.Test" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
      <module name="PyGation" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="_new_additionalArguments" value="&quot;&quot;" />
      <option name="_new_target" value="&quot;irrigation.test_Irrigation.Test&quot;" />
      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
      <method v="2" />
    </configuration>
    <configuration name="Python tests for irrigation.test_Irrigation.Test.test_pump_on_command" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
      <module name="PyGation" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="_new_additionalArguments" value="&quot;&quot;" />
      <option name="_new_target" value="&quot;irrigation.test_Irrigation.Test.test_pump_on_command&quot;" />
      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
      <method v="2" />
    </configuration>
    <configuration name="Python tests for irrigation.test_Irrigation.Test.test_run_schedule" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
      <module name="PyGation" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="_new_additionalArguments" value="&quot;&quot;" />
      <option name="_new_target" value="&quot;irrigation.test_Irrigation.Test.test_run_schedule&quot;" />
      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
      <method v="2" />
    </configuration>
    <configuration name="Python tests for irrigation.test_Irrigation.Test.test_schedule_watering" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
      <module name="PyGation" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="_new_additionalArguments" value="&quot;&quot;" />
      <option name="_new_target" value="&quot;irrigation.test_Irrigation.Test.test_schedule_watering&quot;" />
      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Python.main" />
        <item itemvalue="Python tests.Python tests for irrigation.test_Irrigation.Test" />
        <item itemvalue="Python tests.Python tests for irrigation.test_Irrigation.Test.test_run_schedule" />
        <item itemvalue="Python tests.Python tests for irrigation.test_Irrigation.Test.test_schedule_watering" />
        <item itemvalue="Python tests.Python tests for irrigation.test_Irrigation.Test.test_pump_on_command" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-python-sdk-348a24fa61fa-5312c7369657-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-251.23774.444" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="b7e261bd-af72-4e5d-b464-2c0b0ae74921" name="Changes" comment="" />
      <created>1743179594493</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1743179594493</updated>
    </task>
    <task id="LOCAL-00001" summary="Initial commit">
      <option name="closed" value="true" />
      <created>1743180807623</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1743180807623</updated>
    </task>
    <task id="LOCAL-00002" summary="Moved mock class">
      <option name="closed" value="true" />
      <created>1743626672992</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1743626672992</updated>
    </task>
    <task id="LOCAL-00003" summary="Added scheduling">
      <option name="closed" value="true" />
      <created>1743690746798</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1743690746799</updated>
    </task>
    <task id="LOCAL-00004" summary="Added config file">
      <option name="closed" value="true" />
      <created>1743692688831</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1743692688831</updated>
    </task>
    <task id="LOCAL-00005" summary="Added pi project and refactored directories">
      <option name="closed" value="true" />
      <created>1756951095520</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1756951095520</updated>
    </task>
    <task id="LOCAL-00006" summary="Added pi stream main file">
      <option name="closed" value="true" />
      <created>1756953153577</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1756953153577</updated>
    </task>
    <task id="LOCAL-00007" summary="Added forward slash to route">
      <option name="closed" value="true" />
      <created>1756953381727</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1756953381727</updated>
    </task>
    <task id="LOCAL-00008" summary="Added forward slash to route">
      <option name="closed" value="true" />
      <created>1756954542577</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1756954542577</updated>
    </task>
    <task id="LOCAL-00009" summary="Fixed for picamera2">
      <option name="closed" value="true" />
      <created>1756954708199</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1756954708199</updated>
    </task>
    <task id="LOCAL-00010" summary="Fixed for picamera2">
      <option name="closed" value="true" />
      <created>1756955117855</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1756955117855</updated>
    </task>
    <task id="LOCAL-00011" summary="Fixed for picamera2">
      <option name="closed" value="true" />
      <created>1756955271132</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1756955271132</updated>
    </task>
    <task id="LOCAL-00012" summary="Fixed for picamera2">
      <option name="closed" value="true" />
      <created>1756955712746</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1756955712747</updated>
    </task>
    <task id="LOCAL-00013" summary="Fixed for picamera2">
      <option name="closed" value="true" />
      <created>1756955929020</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1756955929020</updated>
    </task>
    <task id="LOCAL-00014" summary="Fixed for picamera2">
      <option name="closed" value="true" />
      <created>1756956272799</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1756956272799</updated>
    </task>
    <task id="LOCAL-00015" summary="Fixed for picamera2">
      <option name="closed" value="true" />
      <created>1756957083174</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1756957083174</updated>
    </task>
    <task id="LOCAL-00016" summary="Fixed for picamera2">
      <option name="closed" value="true" />
      <created>1756957790958</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1756957790958</updated>
    </task>
    <task id="LOCAL-00017" summary="Testing refactored main">
      <option name="closed" value="true" />
      <created>1756957962662</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1756957962662</updated>
    </task>
    <task id="LOCAL-00018" summary="Added stream to hub">
      <created>1757452926054</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1757452926055</updated>
    </task>
    <task id="LOCAL-00019" summary="Fixed camera reference">
      <created>1757453172610</created>
      <option name="number" value="00019" />
      <option name="presentableId" value="LOCAL-00019" />
      <option name="project" value="LOCAL" />
      <updated>1757453172610</updated>
    </task>
    <task id="LOCAL-00020" summary="oop version of main">
      <created>1758434914321</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1758434914322</updated>
    </task>
    <task id="LOCAL-00021" summary="import logging&#10;from dataclasses import dataclass&#10;from picamera2.outputs import FileOutput, CircularOutput, FfmpegOutput, PyavOutput&#10;import time&#10;&#10;LOG = logging.getLogger(&quot;PiSecureKit&quot;)&#10;&#10;&#10;@dataclass&#10;class VideoConfig:&#10;    width: int = 1920&#10;    height: int = 1080&#10;    format: str = &quot;YUV420&quot;&#10;    frame_rate: int = 30&#10;    lores_enabled: bool = False&#10;    lores_width: int = 640&#10;    lores_height: int = 480&#10;&#10;&#10;class Picamera2Driver:&#10;    def __init__(self, cfg):&#10;        self._cfg = cfg&#10;        self._picam2 = None  # Assume initialization elsewhere&#10;&#10;        # Attempt a series of increasingly lighter configurations to avoid DMA/CMA OOM&#10;        attempts = [&#10;            # (width, height, pixel_format, buffer_count, use_lores)&#10;            (self._cfg.video.width, self._cfg.video.height, self._cfg.video.format, 3, self._cfg.video.lores_enabled),&#10;            (1280, 720,       &quot;YUV420&quot;, 3, False),&#10;            (1280, 720,       &quot;YUV420&quot;, 2, False),&#10;            (1024, 576,       &quot;YUV420&quot;, 2, False),&#10;            (640,  480,       &quot;YUV420&quot;, 2, False),&#10;        ]&#10;&#10;        configured = False&#10;        for (w, h, fmt, buffers, use_lores) in attempts:&#10;            if self._try_configure(w, h, fmt, buffers, use_lores):&#10;                LOG.info(&quot;Configured camera: %dx%d %s (buffers=%d, lores=%s)&quot;, w, h, fmt, buffers, use_lores)&#10;                configured = True&#10;                break&#10;&#10;        if not configured:&#10;            raise RuntimeError(&quot;Failed to configure Picamera2 after multiple attempts; likely CMA/DMA memory is insufficient.&quot;)&#10;&#10;    def _try_configure(self, main_w: int, main_h: int, main_fmt: str, buffer_count: int, use_lores: bool) -&gt; bool:&#10;        try:&#10;            kwargs = {&#10;                &quot;main&quot;: {&quot;size&quot;: (main_w, main_h), &quot;format&quot;: main_fmt},&#10;                &quot;controls&quot;: {&quot;FrameRate&quot;: self._cfg.video.frame_rate},&#10;            }&#10;            if use_lores:&#10;                kwargs[&quot;lores&quot;] = {&quot;size&quot;: (self._cfg.video.lores_width, self._cfg.video.lores_height), &quot;format&quot;: &quot;YUV420&quot;}&#10;            video_conf = self._picam2.create_video_configuration(**kwargs)&#10;            video_conf[&quot;buffer_count&quot;] = buffer_count&#10;            self._picam2.align_configuration(video_conf)&#10;            self._picam2.configure(video_conf)&#10;            return True&#10;        except Exception as e:&#10;            LOG.warning(&quot;Configure attempt failed for %dx%d %s (buffers=%d, lores=%s): %s&quot;, main_w, main_h, main_fmt, buffer_count, use_lores, e)&#10;            return False&#10;&#10;    def start(self):&#10;        pass&#10;&#10;&#10;def build_camera(cfg):&#10;    pass&#10;&#10;&#10;# Assume picam2, HUB, encoder_HQ are defined elsewhere in the code&#10;&#10;# After two video_config creations and picam2.configure(video_config2)&#10;# picam2.configure(video_config2)&#10;picam2.set_controls({&quot;AfMode&quot;: 0})  # 0=Manual; avoids PDAF path on IMX708&#10;&#10;# Prefer PyAV for proper PTS; fall back to FFMPEG if PyAV is unavailable&#10;try:&#10;    HQoutput = PyavOutput(f&quot;rtsp://{HUB}:8554/hqstream&quot;, format=&quot;rtsp&quot;)&#10;    logging.info(&quot;Using PyavOutput (rtsp) for accurate timestamps&quot;)&#10;except Exception as e:&#10;    logging.warning(&quot;PyavOutput not available (%s); falling back to FfmpegOutput&quot;, e)&#10;    HQoutput = FfmpegOutput(&#10;        f&quot;-fflags +genpts -use_wallclock_as_timestamps 1 &quot;&#10;        f&quot;-rtsp_transport tcp -muxdelay 0 -muxpreload 0 &quot;&#10;        f&quot;-f rtsp rtsp://{HUB}:8554/hqstream&quot;,&#10;        audio=False&#10;    )&#10;&#10;# LQoutput = FfmpegOutput(&#10;#     f&quot;-fflags +genpts -use_wallclock_as_timestamps 1 &quot;&#10;#     f&quot;-rtsp_transport tcp -muxdelay 0 -muxpreload 0 &quot;&#10;#     f&quot;-f rtsp rtsp://{HUB}:8554/lqstream&quot;,&#10;#     audio=False&#10;# )&#10;&#10;retries = 0&#10;MAX_RETRIES = 10&#10;print(&quot;starting camera watchdog loop&quot;)&#10;while True:&#10;    try:&#10;        print(&quot;starting camera streamsâ€¦&quot;)&#10;        picam2.start_recording(encoder_HQ, HQoutput)&#10;        print(&quot;camera streams started&quot;)&#10;        last_still = 0.0&#10;        while True:&#10;            now = time.monotonic()&#10;            if now - last_still &gt;= 5.0:&#10;                req = picam2.capture_request()&#10;                try:&#10;                    req.save(&quot;main&quot;, &quot;/dev/shm/camera-tmp.jpg&quot;)&#10;                finally:&#10;                    req.release()&#10;                last_still = now&#10;            time.sleep(0.05)&#10;    except Exception as e:&#10;        logging.error(&quot;streamer exception: %s&quot;, e)&#10;        # Stop recording and attempt reconfigure/restart&#10;        try:&#10;            picam2.stop_recording()&#10;        except Exception:&#10;            pass&#10;        retries += 1&#10;        if retries &gt; MAX_RETRIES:&#10;            logging.critical(&quot;too many failures; exiting watchdog&quot;)&#10;            break&#10;        # Re-align and re-configure with safer settings in case CMA fragmented&#10;        try:&#10;            safe_conf = picam2.create_video_configuration(&#10;                main={&quot;size&quot;: (1280, 720), &quot;format&quot;: &quot;YUV420&quot;},&#10;                lores=None,&#10;                raw=None,&#10;                controls={&quot;FrameRate&quot;: 30},&#10;                buffer_count=2,&#10;            )&#10;            picam2.align_configuration(safe_conf)&#10;            picam2.configure(safe_conf)&#10;            picam2.set_controls({&quot;AfMode&quot;: 0})&#10;        except Exception as reconf_err:&#10;            logging.error(&quot;reconfigure failed: %s&quot;, reconf_err)&#10;        # Short backoff before retry&#10;        time.sleep(2.0)&#10;        continue">
      <created>1758505522857</created>
      <option name="number" value="00021" />
      <option name="presentableId" value="LOCAL-00021" />
      <option name="project" value="LOCAL" />
      <updated>1758505522857</updated>
    </task>
    <task id="LOCAL-00022" summary="import logging&#10;from dataclasses import dataclass&#10;from picamera2.outputs import FileOutput, CircularOutput, FfmpegOutput, PyavOutput&#10;import time&#10;&#10;LOG = logging.getLogger(&quot;PiSecureKit&quot;)&#10;&#10;&#10;@dataclass&#10;class VideoConfig:&#10;    width: int = 1920&#10;    height: int = 1080&#10;    format: str = &quot;YUV420&quot;&#10;    frame_rate: int = 30&#10;    lores_enabled: bool = False&#10;    lores_width: int = 640&#10;    lores_height: int = 480&#10;&#10;&#10;class Picamera2Driver:&#10;    def __init__(self, cfg):&#10;        self._cfg = cfg&#10;        self._picam2 = None  # Assume initialization elsewhere&#10;&#10;        # Attempt a series of increasingly lighter configurations to avoid DMA/CMA OOM&#10;        attempts = [&#10;            # (width, height, pixel_format, buffer_count, use_lores)&#10;            (self._cfg.video.width, self._cfg.video.height, self._cfg.video.format, 3, self._cfg.video.lores_enabled),&#10;            (1280, 720,       &quot;YUV420&quot;, 3, False),&#10;            (1280, 720,       &quot;YUV420&quot;, 2, False),&#10;            (1024, 576,       &quot;YUV420&quot;, 2, False),&#10;            (640,  480,       &quot;YUV420&quot;, 2, False),&#10;        ]&#10;&#10;        configured = False&#10;        for (w, h, fmt, buffers, use_lores) in attempts:&#10;            if self._try_configure(w, h, fmt, buffers, use_lores):&#10;                LOG.info(&quot;Configured camera: %dx%d %s (buffers=%d, lores=%s)&quot;, w, h, fmt, buffers, use_lores)&#10;                configured = True&#10;                break&#10;&#10;        if not configured:&#10;            raise RuntimeError(&quot;Failed to configure Picamera2 after multiple attempts; likely CMA/DMA memory is insufficient.&quot;)&#10;&#10;    def _try_configure(self, main_w: int, main_h: int, main_fmt: str, buffer_count: int, use_lores: bool) -&gt; bool:&#10;        try:&#10;            kwargs = {&#10;                &quot;main&quot;: {&quot;size&quot;: (main_w, main_h), &quot;format&quot;: main_fmt},&#10;                &quot;controls&quot;: {&quot;FrameRate&quot;: self._cfg.video.frame_rate},&#10;            }&#10;            if use_lores:&#10;                kwargs[&quot;lores&quot;] = {&quot;size&quot;: (self._cfg.video.lores_width, self._cfg.video.lores_height), &quot;format&quot;: &quot;YUV420&quot;}&#10;            video_conf = self._picam2.create_video_configuration(**kwargs)&#10;            video_conf[&quot;buffer_count&quot;] = buffer_count&#10;            self._picam2.align_configuration(video_conf)&#10;            self._picam2.configure(video_conf)&#10;            return True&#10;        except Exception as e:&#10;            LOG.warning(&quot;Configure attempt failed for %dx%d %s (buffers=%d, lores=%s): %s&quot;, main_w, main_h, main_fmt, buffer_count, use_lores, e)&#10;            return False&#10;&#10;    def start(self):&#10;        pass&#10;&#10;&#10;def build_camera(cfg):&#10;    pass&#10;&#10;&#10;# Assume picam2, HUB, encoder_HQ are defined elsewhere in the code&#10;&#10;# After two video_config creations and picam2.configure(video_config2)&#10;# picam2.configure(video_config2)&#10;picam2.set_controls({&quot;AfMode&quot;: 0})  # 0=Manual; avoids PDAF path on IMX708&#10;&#10;# Prefer PyAV for proper PTS; fall back to FFMPEG if PyAV is unavailable&#10;try:&#10;    HQoutput = PyavOutput(f&quot;rtsp://{HUB}:8554/hqstream&quot;, format=&quot;rtsp&quot;)&#10;    logging.info(&quot;Using PyavOutput (rtsp) for accurate timestamps&quot;)&#10;except Exception as e:&#10;    logging.warning(&quot;PyavOutput not available (%s); falling back to FfmpegOutput&quot;, e)&#10;    HQoutput = FfmpegOutput(&#10;        f&quot;-fflags +genpts -use_wallclock_as_timestamps 1 &quot;&#10;        f&quot;-rtsp_transport tcp -muxdelay 0 -muxpreload 0 &quot;&#10;        f&quot;-f rtsp rtsp://{HUB}:8554/hqstream&quot;,&#10;        audio=False&#10;    )&#10;&#10;# LQoutput = FfmpegOutput(&#10;#     f&quot;-fflags +genpts -use_wallclock_as_timestamps 1 &quot;&#10;#     f&quot;-rtsp_transport tcp -muxdelay 0 -muxpreload 0 &quot;&#10;#     f&quot;-f rtsp rtsp://{HUB}:8554/lqstream&quot;,&#10;#     audio=False&#10;# )&#10;&#10;retries = 0&#10;MAX_RETRIES = 10&#10;print(&quot;starting camera watchdog loop&quot;)&#10;while True:&#10;    try:&#10;        print(&quot;starting camera streamsâ€¦&quot;)&#10;        picam2.start_recording(encoder_HQ, HQoutput)&#10;        print(&quot;camera streams started&quot;)&#10;        last_still = 0.0&#10;        while True:&#10;            now = time.monotonic()&#10;            if now - last_still &gt;= 5.0:&#10;                req = picam2.capture_request()&#10;                try:&#10;                    req.save(&quot;main&quot;, &quot;/dev/shm/camera-tmp.jpg&quot;)&#10;                finally:&#10;                    req.release()&#10;                last_still = now&#10;            time.sleep(0.05)&#10;    except Exception as e:&#10;        logging.error(&quot;streamer exception: %s&quot;, e)&#10;        # Stop recording and attempt reconfigure/restart&#10;        try:&#10;            picam2.stop_recording()&#10;        except Exception:&#10;            pass&#10;        retries += 1&#10;        if retries &gt; MAX_RETRIES:&#10;            logging.critical(&quot;too many failures; exiting watchdog&quot;)&#10;            break&#10;        # Re-align and re-configure with safer settings in case CMA fragmented&#10;        try:&#10;            safe_conf = picam2.create_video_configuration(&#10;                main={&quot;size&quot;: (1280, 720), &quot;format&quot;: &quot;YUV420&quot;},&#10;                lores=None,&#10;                raw=None,&#10;                controls={&quot;FrameRate&quot;: 30},&#10;                buffer_count=2,&#10;            )&#10;            picam2.align_configuration(safe_conf)&#10;            picam2.configure(safe_conf)&#10;            picam2.set_controls({&quot;AfMode&quot;: 0})&#10;        except Exception as reconf_err:&#10;            logging.error(&quot;reconfigure failed: %s&quot;, reconf_err)&#10;        # Short backoff before retry&#10;        time.sleep(2.0)&#10;        continue">
      <created>1758506315181</created>
      <option name="number" value="00022" />
      <option name="presentableId" value="LOCAL-00022" />
      <option name="project" value="LOCAL" />
      <updated>1758506315181</updated>
    </task>
    <task id="LOCAL-00023" summary="import logging&#10;from dataclasses import dataclass&#10;from picamera2.outputs import FileOutput, CircularOutput, FfmpegOutput, PyavOutput&#10;import time&#10;&#10;LOG = logging.getLogger(&quot;PiSecureKit&quot;)&#10;&#10;&#10;@dataclass&#10;class VideoConfig:&#10;    width: int = 1920&#10;    height: int = 1080&#10;    format: str = &quot;YUV420&quot;&#10;    frame_rate: int = 30&#10;    lores_enabled: bool = False&#10;    lores_width: int = 640&#10;    lores_height: int = 480&#10;&#10;&#10;class Picamera2Driver:&#10;    def __init__(self, cfg):&#10;        self._cfg = cfg&#10;        self._picam2 = None  # Assume initialization elsewhere&#10;&#10;        # Attempt a series of increasingly lighter configurations to avoid DMA/CMA OOM&#10;        attempts = [&#10;            # (width, height, pixel_format, buffer_count, use_lores)&#10;            (self._cfg.video.width, self._cfg.video.height, self._cfg.video.format, 3, self._cfg.video.lores_enabled),&#10;            (1280, 720,       &quot;YUV420&quot;, 3, False),&#10;            (1280, 720,       &quot;YUV420&quot;, 2, False),&#10;            (1024, 576,       &quot;YUV420&quot;, 2, False),&#10;            (640,  480,       &quot;YUV420&quot;, 2, False),&#10;        ]&#10;&#10;        configured = False&#10;        for (w, h, fmt, buffers, use_lores) in attempts:&#10;            if self._try_configure(w, h, fmt, buffers, use_lores):&#10;                LOG.info(&quot;Configured camera: %dx%d %s (buffers=%d, lores=%s)&quot;, w, h, fmt, buffers, use_lores)&#10;                configured = True&#10;                break&#10;&#10;        if not configured:&#10;            raise RuntimeError(&quot;Failed to configure Picamera2 after multiple attempts; likely CMA/DMA memory is insufficient.&quot;)&#10;&#10;    def _try_configure(self, main_w: int, main_h: int, main_fmt: str, buffer_count: int, use_lores: bool) -&gt; bool:&#10;        try:&#10;            kwargs = {&#10;                &quot;main&quot;: {&quot;size&quot;: (main_w, main_h), &quot;format&quot;: main_fmt},&#10;                &quot;controls&quot;: {&quot;FrameRate&quot;: self._cfg.video.frame_rate},&#10;            }&#10;            if use_lores:&#10;                kwargs[&quot;lores&quot;] = {&quot;size&quot;: (self._cfg.video.lores_width, self._cfg.video.lores_height), &quot;format&quot;: &quot;YUV420&quot;}&#10;            video_conf = self._picam2.create_video_configuration(**kwargs)&#10;            video_conf[&quot;buffer_count&quot;] = buffer_count&#10;            self._picam2.align_configuration(video_conf)&#10;            self._picam2.configure(video_conf)&#10;            return True&#10;        except Exception as e:&#10;            LOG.warning(&quot;Configure attempt failed for %dx%d %s (buffers=%d, lores=%s): %s&quot;, main_w, main_h, main_fmt, buffer_count, use_lores, e)&#10;            return False&#10;&#10;    def start(self):&#10;        pass&#10;&#10;&#10;def build_camera(cfg):&#10;    pass&#10;&#10;&#10;# Assume picam2, HUB, encoder_HQ are defined elsewhere in the code&#10;&#10;# After two video_config creations and picam2.configure(video_config2)&#10;# picam2.configure(video_config2)&#10;picam2.set_controls({&quot;AfMode&quot;: 0})  # 0=Manual; avoids PDAF path on IMX708&#10;&#10;# Prefer PyAV for proper PTS; fall back to FFMPEG if PyAV is unavailable&#10;try:&#10;    HQoutput = PyavOutput(f&quot;rtsp://{HUB}:8554/hqstream&quot;, format=&quot;rtsp&quot;)&#10;    logging.info(&quot;Using PyavOutput (rtsp) for accurate timestamps&quot;)&#10;except Exception as e:&#10;    logging.warning(&quot;PyavOutput not available (%s); falling back to FfmpegOutput&quot;, e)&#10;    HQoutput = FfmpegOutput(&#10;        f&quot;-fflags +genpts -use_wallclock_as_timestamps 1 &quot;&#10;        f&quot;-rtsp_transport tcp -muxdelay 0 -muxpreload 0 &quot;&#10;        f&quot;-f rtsp rtsp://{HUB}:8554/hqstream&quot;,&#10;        audio=False&#10;    )&#10;&#10;# LQoutput = FfmpegOutput(&#10;#     f&quot;-fflags +genpts -use_wallclock_as_timestamps 1 &quot;&#10;#     f&quot;-rtsp_transport tcp -muxdelay 0 -muxpreload 0 &quot;&#10;#     f&quot;-f rtsp rtsp://{HUB}:8554/lqstream&quot;,&#10;#     audio=False&#10;# )&#10;&#10;retries = 0&#10;MAX_RETRIES = 10&#10;print(&quot;starting camera watchdog loop&quot;)&#10;while True:&#10;    try:&#10;        print(&quot;starting camera streamsâ€¦&quot;)&#10;        picam2.start_recording(encoder_HQ, HQoutput)&#10;        print(&quot;camera streams started&quot;)&#10;        last_still = 0.0&#10;        while True:&#10;            now = time.monotonic()&#10;            if now - last_still &gt;= 5.0:&#10;                req = picam2.capture_request()&#10;                try:&#10;                    req.save(&quot;main&quot;, &quot;/dev/shm/camera-tmp.jpg&quot;)&#10;                finally:&#10;                    req.release()&#10;                last_still = now&#10;            time.sleep(0.05)&#10;    except Exception as e:&#10;        logging.error(&quot;streamer exception: %s&quot;, e)&#10;        # Stop recording and attempt reconfigure/restart&#10;        try:&#10;            picam2.stop_recording()&#10;        except Exception:&#10;            pass&#10;        retries += 1&#10;        if retries &gt; MAX_RETRIES:&#10;            logging.critical(&quot;too many failures; exiting watchdog&quot;)&#10;            break&#10;        # Re-align and re-configure with safer settings in case CMA fragmented&#10;        try:&#10;            safe_conf = picam2.create_video_configuration(&#10;                main={&quot;size&quot;: (1280, 720), &quot;format&quot;: &quot;YUV420&quot;},&#10;                lores=None,&#10;                raw=None,&#10;                controls={&quot;FrameRate&quot;: 30},&#10;                buffer_count=2,&#10;            )&#10;            picam2.align_configuration(safe_conf)&#10;            picam2.configure(safe_conf)&#10;            picam2.set_controls({&quot;AfMode&quot;: 0})&#10;        except Exception as reconf_err:&#10;            logging.error(&quot;reconfigure failed: %s&quot;, reconf_err)&#10;        # Short backoff before retry&#10;        time.sleep(2.0)&#10;        continue">
      <created>1758508097218</created>
      <option name="number" value="00023" />
      <option name="presentableId" value="LOCAL-00023" />
      <option name="project" value="LOCAL" />
      <updated>1758508097218</updated>
    </task>
    <task id="LOCAL-00024" summary="import logging&#10;from dataclasses import dataclass&#10;from picamera2.outputs import FileOutput, CircularOutput, FfmpegOutput, PyavOutput&#10;import time&#10;&#10;LOG = logging.getLogger(&quot;PiSecureKit&quot;)&#10;&#10;&#10;@dataclass&#10;class VideoConfig:&#10;    width: int = 1920&#10;    height: int = 1080&#10;    format: str = &quot;YUV420&quot;&#10;    frame_rate: int = 30&#10;    lores_enabled: bool = False&#10;    lores_width: int = 640&#10;    lores_height: int = 480&#10;&#10;&#10;class Picamera2Driver:&#10;    def __init__(self, cfg):&#10;        self._cfg = cfg&#10;        self._picam2 = None  # Assume initialization elsewhere&#10;&#10;        # Attempt a series of increasingly lighter configurations to avoid DMA/CMA OOM&#10;        attempts = [&#10;            # (width, height, pixel_format, buffer_count, use_lores)&#10;            (self._cfg.video.width, self._cfg.video.height, self._cfg.video.format, 3, self._cfg.video.lores_enabled),&#10;            (1280, 720,       &quot;YUV420&quot;, 3, False),&#10;            (1280, 720,       &quot;YUV420&quot;, 2, False),&#10;            (1024, 576,       &quot;YUV420&quot;, 2, False),&#10;            (640,  480,       &quot;YUV420&quot;, 2, False),&#10;        ]&#10;&#10;        configured = False&#10;        for (w, h, fmt, buffers, use_lores) in attempts:&#10;            if self._try_configure(w, h, fmt, buffers, use_lores):&#10;                LOG.info(&quot;Configured camera: %dx%d %s (buffers=%d, lores=%s)&quot;, w, h, fmt, buffers, use_lores)&#10;                configured = True&#10;                break&#10;&#10;        if not configured:&#10;            raise RuntimeError(&quot;Failed to configure Picamera2 after multiple attempts; likely CMA/DMA memory is insufficient.&quot;)&#10;&#10;    def _try_configure(self, main_w: int, main_h: int, main_fmt: str, buffer_count: int, use_lores: bool) -&gt; bool:&#10;        try:&#10;            kwargs = {&#10;                &quot;main&quot;: {&quot;size&quot;: (main_w, main_h), &quot;format&quot;: main_fmt},&#10;                &quot;controls&quot;: {&quot;FrameRate&quot;: self._cfg.video.frame_rate},&#10;            }&#10;            if use_lores:&#10;                kwargs[&quot;lores&quot;] = {&quot;size&quot;: (self._cfg.video.lores_width, self._cfg.video.lores_height), &quot;format&quot;: &quot;YUV420&quot;}&#10;            video_conf = self._picam2.create_video_configuration(**kwargs)&#10;            video_conf[&quot;buffer_count&quot;] = buffer_count&#10;            self._picam2.align_configuration(video_conf)&#10;            self._picam2.configure(video_conf)&#10;            return True&#10;        except Exception as e:&#10;            LOG.warning(&quot;Configure attempt failed for %dx%d %s (buffers=%d, lores=%s): %s&quot;, main_w, main_h, main_fmt, buffer_count, use_lores, e)&#10;            return False&#10;&#10;    def start(self):&#10;        pass&#10;&#10;&#10;def build_camera(cfg):&#10;    pass&#10;&#10;&#10;# Assume picam2, HUB, encoder_HQ are defined elsewhere in the code&#10;&#10;# After two video_config creations and picam2.configure(video_config2)&#10;# picam2.configure(video_config2)&#10;picam2.set_controls({&quot;AfMode&quot;: 0})  # 0=Manual; avoids PDAF path on IMX708&#10;&#10;# Prefer PyAV for proper PTS; fall back to FFMPEG if PyAV is unavailable&#10;try:&#10;    HQoutput = PyavOutput(f&quot;rtsp://{HUB}:8554/hqstream&quot;, format=&quot;rtsp&quot;)&#10;    logging.info(&quot;Using PyavOutput (rtsp) for accurate timestamps&quot;)&#10;except Exception as e:&#10;    logging.warning(&quot;PyavOutput not available (%s); falling back to FfmpegOutput&quot;, e)&#10;    HQoutput = FfmpegOutput(&#10;        f&quot;-fflags +genpts -use_wallclock_as_timestamps 1 &quot;&#10;        f&quot;-rtsp_transport tcp -muxdelay 0 -muxpreload 0 &quot;&#10;        f&quot;-f rtsp rtsp://{HUB}:8554/hqstream&quot;,&#10;        audio=False&#10;    )&#10;&#10;# LQoutput = FfmpegOutput(&#10;#     f&quot;-fflags +genpts -use_wallclock_as_timestamps 1 &quot;&#10;#     f&quot;-rtsp_transport tcp -muxdelay 0 -muxpreload 0 &quot;&#10;#     f&quot;-f rtsp rtsp://{HUB}:8554/lqstream&quot;,&#10;#     audio=False&#10;# )&#10;&#10;retries = 0&#10;MAX_RETRIES = 10&#10;print(&quot;starting camera watchdog loop&quot;)&#10;while True:&#10;    try:&#10;        print(&quot;starting camera streamsâ€¦&quot;)&#10;        picam2.start_recording(encoder_HQ, HQoutput)&#10;        print(&quot;camera streams started&quot;)&#10;        last_still = 0.0&#10;        while True:&#10;            now = time.monotonic()&#10;            if now - last_still &gt;= 5.0:&#10;                req = picam2.capture_request()&#10;                try:&#10;                    req.save(&quot;main&quot;, &quot;/dev/shm/camera-tmp.jpg&quot;)&#10;                finally:&#10;                    req.release()&#10;                last_still = now&#10;            time.sleep(0.05)&#10;    except Exception as e:&#10;        logging.error(&quot;streamer exception: %s&quot;, e)&#10;        # Stop recording and attempt reconfigure/restart&#10;        try:&#10;            picam2.stop_recording()&#10;        except Exception:&#10;            pass&#10;        retries += 1&#10;        if retries &gt; MAX_RETRIES:&#10;            logging.critical(&quot;too many failures; exiting watchdog&quot;)&#10;            break&#10;        # Re-align and re-configure with safer settings in case CMA fragmented&#10;        try:&#10;            safe_conf = picam2.create_video_configuration(&#10;                main={&quot;size&quot;: (1280, 720), &quot;format&quot;: &quot;YUV420&quot;},&#10;                lores=None,&#10;                raw=None,&#10;                controls={&quot;FrameRate&quot;: 30},&#10;                buffer_count=2,&#10;            )&#10;            picam2.align_configuration(safe_conf)&#10;            picam2.configure(safe_conf)&#10;            picam2.set_controls({&quot;AfMode&quot;: 0})&#10;        except Exception as reconf_err:&#10;            logging.error(&quot;reconfigure failed: %s&quot;, reconf_err)&#10;        # Short backoff before retry&#10;        time.sleep(2.0)&#10;        continue">
      <created>1758508298690</created>
      <option name="number" value="00024" />
      <option name="presentableId" value="LOCAL-00024" />
      <option name="project" value="LOCAL" />
      <updated>1758508298690</updated>
    </task>
    <option name="localTasksCounter" value="25" />
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Initial commit" />
    <MESSAGE value="Moved mock class" />
    <MESSAGE value="Added scheduling" />
    <MESSAGE value="Added config file" />
    <MESSAGE value="Added pi project and refactored directories" />
    <MESSAGE value="Added pi stream main file" />
    <MESSAGE value="Added forward slash to route" />
    <MESSAGE value="Fixed for picamera2" />
    <MESSAGE value="Testing refactored main" />
    <MESSAGE value="Added stream to hub" />
    <MESSAGE value="Fixed camera reference" />
    <MESSAGE value="oop version of main" />
    <MESSAGE value="import logging&#10;from dataclasses import dataclass&#10;from picamera2.outputs import FileOutput, CircularOutput, FfmpegOutput, PyavOutput&#10;import time&#10;&#10;LOG = logging.getLogger(&quot;PiSecureKit&quot;)&#10;&#10;&#10;@dataclass&#10;class VideoConfig:&#10;    width: int = 1920&#10;    height: int = 1080&#10;    format: str = &quot;YUV420&quot;&#10;    frame_rate: int = 30&#10;    lores_enabled: bool = False&#10;    lores_width: int = 640&#10;    lores_height: int = 480&#10;&#10;&#10;class Picamera2Driver:&#10;    def __init__(self, cfg):&#10;        self._cfg = cfg&#10;        self._picam2 = None  # Assume initialization elsewhere&#10;&#10;        # Attempt a series of increasingly lighter configurations to avoid DMA/CMA OOM&#10;        attempts = [&#10;            # (width, height, pixel_format, buffer_count, use_lores)&#10;            (self._cfg.video.width, self._cfg.video.height, self._cfg.video.format, 3, self._cfg.video.lores_enabled),&#10;            (1280, 720,       &quot;YUV420&quot;, 3, False),&#10;            (1280, 720,       &quot;YUV420&quot;, 2, False),&#10;            (1024, 576,       &quot;YUV420&quot;, 2, False),&#10;            (640,  480,       &quot;YUV420&quot;, 2, False),&#10;        ]&#10;&#10;        configured = False&#10;        for (w, h, fmt, buffers, use_lores) in attempts:&#10;            if self._try_configure(w, h, fmt, buffers, use_lores):&#10;                LOG.info(&quot;Configured camera: %dx%d %s (buffers=%d, lores=%s)&quot;, w, h, fmt, buffers, use_lores)&#10;                configured = True&#10;                break&#10;&#10;        if not configured:&#10;            raise RuntimeError(&quot;Failed to configure Picamera2 after multiple attempts; likely CMA/DMA memory is insufficient.&quot;)&#10;&#10;    def _try_configure(self, main_w: int, main_h: int, main_fmt: str, buffer_count: int, use_lores: bool) -&gt; bool:&#10;        try:&#10;            kwargs = {&#10;                &quot;main&quot;: {&quot;size&quot;: (main_w, main_h), &quot;format&quot;: main_fmt},&#10;                &quot;controls&quot;: {&quot;FrameRate&quot;: self._cfg.video.frame_rate},&#10;            }&#10;            if use_lores:&#10;                kwargs[&quot;lores&quot;] = {&quot;size&quot;: (self._cfg.video.lores_width, self._cfg.video.lores_height), &quot;format&quot;: &quot;YUV420&quot;}&#10;            video_conf = self._picam2.create_video_configuration(**kwargs)&#10;            video_conf[&quot;buffer_count&quot;] = buffer_count&#10;            self._picam2.align_configuration(video_conf)&#10;            self._picam2.configure(video_conf)&#10;            return True&#10;        except Exception as e:&#10;            LOG.warning(&quot;Configure attempt failed for %dx%d %s (buffers=%d, lores=%s): %s&quot;, main_w, main_h, main_fmt, buffer_count, use_lores, e)&#10;            return False&#10;&#10;    def start(self):&#10;        pass&#10;&#10;&#10;def build_camera(cfg):&#10;    pass&#10;&#10;&#10;# Assume picam2, HUB, encoder_HQ are defined elsewhere in the code&#10;&#10;# After two video_config creations and picam2.configure(video_config2)&#10;# picam2.configure(video_config2)&#10;picam2.set_controls({&quot;AfMode&quot;: 0})  # 0=Manual; avoids PDAF path on IMX708&#10;&#10;# Prefer PyAV for proper PTS; fall back to FFMPEG if PyAV is unavailable&#10;try:&#10;    HQoutput = PyavOutput(f&quot;rtsp://{HUB}:8554/hqstream&quot;, format=&quot;rtsp&quot;)&#10;    logging.info(&quot;Using PyavOutput (rtsp) for accurate timestamps&quot;)&#10;except Exception as e:&#10;    logging.warning(&quot;PyavOutput not available (%s); falling back to FfmpegOutput&quot;, e)&#10;    HQoutput = FfmpegOutput(&#10;        f&quot;-fflags +genpts -use_wallclock_as_timestamps 1 &quot;&#10;        f&quot;-rtsp_transport tcp -muxdelay 0 -muxpreload 0 &quot;&#10;        f&quot;-f rtsp rtsp://{HUB}:8554/hqstream&quot;,&#10;        audio=False&#10;    )&#10;&#10;# LQoutput = FfmpegOutput(&#10;#     f&quot;-fflags +genpts -use_wallclock_as_timestamps 1 &quot;&#10;#     f&quot;-rtsp_transport tcp -muxdelay 0 -muxpreload 0 &quot;&#10;#     f&quot;-f rtsp rtsp://{HUB}:8554/lqstream&quot;,&#10;#     audio=False&#10;# )&#10;&#10;retries = 0&#10;MAX_RETRIES = 10&#10;print(&quot;starting camera watchdog loop&quot;)&#10;while True:&#10;    try:&#10;        print(&quot;starting camera streamsâ€¦&quot;)&#10;        picam2.start_recording(encoder_HQ, HQoutput)&#10;        print(&quot;camera streams started&quot;)&#10;        last_still = 0.0&#10;        while True:&#10;            now = time.monotonic()&#10;            if now - last_still &gt;= 5.0:&#10;                req = picam2.capture_request()&#10;                try:&#10;                    req.save(&quot;main&quot;, &quot;/dev/shm/camera-tmp.jpg&quot;)&#10;                finally:&#10;                    req.release()&#10;                last_still = now&#10;            time.sleep(0.05)&#10;    except Exception as e:&#10;        logging.error(&quot;streamer exception: %s&quot;, e)&#10;        # Stop recording and attempt reconfigure/restart&#10;        try:&#10;            picam2.stop_recording()&#10;        except Exception:&#10;            pass&#10;        retries += 1&#10;        if retries &gt; MAX_RETRIES:&#10;            logging.critical(&quot;too many failures; exiting watchdog&quot;)&#10;            break&#10;        # Re-align and re-configure with safer settings in case CMA fragmented&#10;        try:&#10;            safe_conf = picam2.create_video_configuration(&#10;                main={&quot;size&quot;: (1280, 720), &quot;format&quot;: &quot;YUV420&quot;},&#10;                lores=None,&#10;                raw=None,&#10;                controls={&quot;FrameRate&quot;: 30},&#10;                buffer_count=2,&#10;            )&#10;            picam2.align_configuration(safe_conf)&#10;            picam2.configure(safe_conf)&#10;            picam2.set_controls({&quot;AfMode&quot;: 0})&#10;        except Exception as reconf_err:&#10;            logging.error(&quot;reconfigure failed: %s&quot;, reconf_err)&#10;        # Short backoff before retry&#10;        time.sleep(2.0)&#10;        continue" />
    <option name="LAST_COMMIT_MESSAGE" value="import logging&#10;from dataclasses import dataclass&#10;from picamera2.outputs import FileOutput, CircularOutput, FfmpegOutput, PyavOutput&#10;import time&#10;&#10;LOG = logging.getLogger(&quot;PiSecureKit&quot;)&#10;&#10;&#10;@dataclass&#10;class VideoConfig:&#10;    width: int = 1920&#10;    height: int = 1080&#10;    format: str = &quot;YUV420&quot;&#10;    frame_rate: int = 30&#10;    lores_enabled: bool = False&#10;    lores_width: int = 640&#10;    lores_height: int = 480&#10;&#10;&#10;class Picamera2Driver:&#10;    def __init__(self, cfg):&#10;        self._cfg = cfg&#10;        self._picam2 = None  # Assume initialization elsewhere&#10;&#10;        # Attempt a series of increasingly lighter configurations to avoid DMA/CMA OOM&#10;        attempts = [&#10;            # (width, height, pixel_format, buffer_count, use_lores)&#10;            (self._cfg.video.width, self._cfg.video.height, self._cfg.video.format, 3, self._cfg.video.lores_enabled),&#10;            (1280, 720,       &quot;YUV420&quot;, 3, False),&#10;            (1280, 720,       &quot;YUV420&quot;, 2, False),&#10;            (1024, 576,       &quot;YUV420&quot;, 2, False),&#10;            (640,  480,       &quot;YUV420&quot;, 2, False),&#10;        ]&#10;&#10;        configured = False&#10;        for (w, h, fmt, buffers, use_lores) in attempts:&#10;            if self._try_configure(w, h, fmt, buffers, use_lores):&#10;                LOG.info(&quot;Configured camera: %dx%d %s (buffers=%d, lores=%s)&quot;, w, h, fmt, buffers, use_lores)&#10;                configured = True&#10;                break&#10;&#10;        if not configured:&#10;            raise RuntimeError(&quot;Failed to configure Picamera2 after multiple attempts; likely CMA/DMA memory is insufficient.&quot;)&#10;&#10;    def _try_configure(self, main_w: int, main_h: int, main_fmt: str, buffer_count: int, use_lores: bool) -&gt; bool:&#10;        try:&#10;            kwargs = {&#10;                &quot;main&quot;: {&quot;size&quot;: (main_w, main_h), &quot;format&quot;: main_fmt},&#10;                &quot;controls&quot;: {&quot;FrameRate&quot;: self._cfg.video.frame_rate},&#10;            }&#10;            if use_lores:&#10;                kwargs[&quot;lores&quot;] = {&quot;size&quot;: (self._cfg.video.lores_width, self._cfg.video.lores_height), &quot;format&quot;: &quot;YUV420&quot;}&#10;            video_conf = self._picam2.create_video_configuration(**kwargs)&#10;            video_conf[&quot;buffer_count&quot;] = buffer_count&#10;            self._picam2.align_configuration(video_conf)&#10;            self._picam2.configure(video_conf)&#10;            return True&#10;        except Exception as e:&#10;            LOG.warning(&quot;Configure attempt failed for %dx%d %s (buffers=%d, lores=%s): %s&quot;, main_w, main_h, main_fmt, buffer_count, use_lores, e)&#10;            return False&#10;&#10;    def start(self):&#10;        pass&#10;&#10;&#10;def build_camera(cfg):&#10;    pass&#10;&#10;&#10;# Assume picam2, HUB, encoder_HQ are defined elsewhere in the code&#10;&#10;# After two video_config creations and picam2.configure(video_config2)&#10;# picam2.configure(video_config2)&#10;picam2.set_controls({&quot;AfMode&quot;: 0})  # 0=Manual; avoids PDAF path on IMX708&#10;&#10;# Prefer PyAV for proper PTS; fall back to FFMPEG if PyAV is unavailable&#10;try:&#10;    HQoutput = PyavOutput(f&quot;rtsp://{HUB}:8554/hqstream&quot;, format=&quot;rtsp&quot;)&#10;    logging.info(&quot;Using PyavOutput (rtsp) for accurate timestamps&quot;)&#10;except Exception as e:&#10;    logging.warning(&quot;PyavOutput not available (%s); falling back to FfmpegOutput&quot;, e)&#10;    HQoutput = FfmpegOutput(&#10;        f&quot;-fflags +genpts -use_wallclock_as_timestamps 1 &quot;&#10;        f&quot;-rtsp_transport tcp -muxdelay 0 -muxpreload 0 &quot;&#10;        f&quot;-f rtsp rtsp://{HUB}:8554/hqstream&quot;,&#10;        audio=False&#10;    )&#10;&#10;# LQoutput = FfmpegOutput(&#10;#     f&quot;-fflags +genpts -use_wallclock_as_timestamps 1 &quot;&#10;#     f&quot;-rtsp_transport tcp -muxdelay 0 -muxpreload 0 &quot;&#10;#     f&quot;-f rtsp rtsp://{HUB}:8554/lqstream&quot;,&#10;#     audio=False&#10;# )&#10;&#10;retries = 0&#10;MAX_RETRIES = 10&#10;print(&quot;starting camera watchdog loop&quot;)&#10;while True:&#10;    try:&#10;        print(&quot;starting camera streamsâ€¦&quot;)&#10;        picam2.start_recording(encoder_HQ, HQoutput)&#10;        print(&quot;camera streams started&quot;)&#10;        last_still = 0.0&#10;        while True:&#10;            now = time.monotonic()&#10;            if now - last_still &gt;= 5.0:&#10;                req = picam2.capture_request()&#10;                try:&#10;                    req.save(&quot;main&quot;, &quot;/dev/shm/camera-tmp.jpg&quot;)&#10;                finally:&#10;                    req.release()&#10;                last_still = now&#10;            time.sleep(0.05)&#10;    except Exception as e:&#10;        logging.error(&quot;streamer exception: %s&quot;, e)&#10;        # Stop recording and attempt reconfigure/restart&#10;        try:&#10;            picam2.stop_recording()&#10;        except Exception:&#10;            pass&#10;        retries += 1&#10;        if retries &gt; MAX_RETRIES:&#10;            logging.critical(&quot;too many failures; exiting watchdog&quot;)&#10;            break&#10;        # Re-align and re-configure with safer settings in case CMA fragmented&#10;        try:&#10;            safe_conf = picam2.create_video_configuration(&#10;                main={&quot;size&quot;: (1280, 720), &quot;format&quot;: &quot;YUV420&quot;},&#10;                lores=None,&#10;                raw=None,&#10;                controls={&quot;FrameRate&quot;: 30},&#10;                buffer_count=2,&#10;            )&#10;            picam2.align_configuration(safe_conf)&#10;            picam2.configure(safe_conf)&#10;            picam2.set_controls({&quot;AfMode&quot;: 0})&#10;        except Exception as reconf_err:&#10;            logging.error(&quot;reconfigure failed: %s&quot;, reconf_err)&#10;        # Short backoff before retry&#10;        time.sleep(2.0)&#10;        continue" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$PROJECT_DIR$/irrigation/Irrigation.py</url>
          <line>89</line>
          <option name="timeStamp" value="9" />
        </line-breakpoint>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$PROJECT_DIR$/irrigation/Irrigation.py</url>
          <line>60</line>
          <option name="timeStamp" value="12" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>